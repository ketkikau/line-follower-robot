
line follower project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c1  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define leftSen PA0                //Connect Left Sensor At PA0
#define rightSen PA1               //Connect Right Sensor At PA1

int main(void)
{
	DDRA=0xFC;                // make PA0,PA1 as input for both sensors 0x0b11111100
  6c:	8c ef       	ldi	r24, 0xFC	; 252
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xFF;      // make Port  as output to connect motor pins
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		PINA=0x03;                                        //initialize PA0 and PA1
  74:	83 e0       	ldi	r24, 0x03	; 3
  76:	89 bb       	out	0x19, r24	; 25
		if(bit_is_clear(PINA,leftSen))
  78:	c8 99       	sbic	0x19, 0	; 25
  7a:	07 c0       	rjmp	.+14     	; 0x8a <main+0x1e>
		{                                                 // check if left sensor is OFF
			if(bit_is_clear(PINA,rightSen))
  7c:	c9 99       	sbic	0x19, 1	; 25
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
			{                                      // check if right sensor is OFF
				PORTD=0b00000000;                  // if both sensor zero
  80:	12 ba       	out	0x12, r1	; 18
  82:	f8 cf       	rjmp	.-16     	; 0x74 <main+0x8>
			}                                           // then stop the robot
			else
			{
				PORTD=0b00000001;                  // if right is ON then take left
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	82 bb       	out	0x12, r24	; 18
  88:	f5 cf       	rjmp	.-22     	; 0x74 <main+0x8>
			}
		}
		else                                  // check if left sensor in ON
		{
			if(bit_is_clear(PINA,rightSen))
  8a:	c9 99       	sbic	0x19, 1	; 25
  8c:	03 c0       	rjmp	.+6      	; 0x94 <main+0x28>
			{                                       // check if right sensor is OFF
				PORTD=0b00000010;                     // it means left sensor is ON
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	82 bb       	out	0x12, r24	; 18
  92:	f0 cf       	rjmp	.-32     	; 0x74 <main+0x8>
			}                                           // so take right
			else
			{
				PORTD=0b00000011;                           // if both sensor is ON
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	82 bb       	out	0x12, r24	; 18
  98:	ed cf       	rjmp	.-38     	; 0x74 <main+0x8>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
